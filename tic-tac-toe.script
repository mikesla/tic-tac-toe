let aliceAddr=Address(base58'3MxMizNF28ixyg1Pvuxi2afcAPpsBgKzjUu')
let alicePubKey  = base58'9Uwm4USQebE9vFi7o2e4U7XAkmPR6kXTAcppL4bAY9AV'
let bobAddr=Address(base58'3NBwn3NZBAAZpdAFmnshDmTtXSVWRPGGP1B')
let bobPubKey    = base58'FkqPh5Yunp329Juap56F1zaKn7UPxbLE6KVaPHowxx3b'
let contract = tx.sender

    #Contract allow Alice and Bob make transactions, without contract account private key.
    let aliceSigned = (sigVerify(tx.bodyBytes,tx.proofs[0],alicePubKey))
    let bobSigned = (sigVerify(tx.bodyBytes,tx.proofs[0],bobPubKey))
    #Extracting field. 1 is cross, 10 is zero. 
    let cell1= extract(getInteger(contract,"cell1"))
    let cell2= extract(getInteger(contract,"cell2"))
    let cell3= extract(getInteger(contract,"cell3"))
    let cell4= extract(getInteger(contract,"cell4"))
    let cell5= extract(getInteger(contract,"cell5"))
    let cell6= extract(getInteger(contract,"cell6"))
    let cell7= extract(getInteger(contract,"cell7"))
    let cell8= extract(getInteger(contract,"cell8"))
    let cell9= extract(getInteger(contract,"cell9"))
    
    #Getting summary value of lines for detecting winner
    let line1= cell1 + cell2 + cell3
    let line2= cell4 + cell5 + cell6
    let line3= cell7 + cell8 + cell9
    let column1= cell1 + cell4 + cell7
    let column2= cell2 + cell5 + cell8
    let column3= cell3 + cell6 + cell9
    let diagonal1= cell1 + cell5 + cell9
    let diagonal2= cell3 + cell5 + cell7
    let all = line1 + line2 + line3

    #1 and 10 representation is comfortable, we can easily get cross and zero number on field
    let crossNum= all % 10
    let zeroNum= (all-crossNum) / 10

    #Also, we can easily understand who win
    let crossWin=  (line1 == 3 || line2 == 3 || line3 == 3 || column1 == 3 || column2 == 3 || column3 == 3 || 
    diagonal1 == 3 || diagonal2 == 3) 
    let zeroWin=  (line1 == 30 || line2 == 30 || line3 == 30 || column1 == 30 || column2 == 30 || column3 == 30 || 
    diagonal1 == 30 || diagonal2 == 30) 
    let draw = (crossNum + zeroNum == 9) && !crossWin && !zeroWin
match tx {
 case tx:DataTransaction =>
    #Extracting different data from transaction
    let dataSize = size(tx.data)
    let cellKey= tx.data[0].key
    let deadlineKey= tx.data[1].key
    let cellValue= extract(tx.data[0].value)

    #Extracting cell, in which we writing from field
    let cell = extract(getInteger(contract,cellKey))

    #Allowing writing only on 1 empty field cells and deadline, nothing more
    let inputCorrect = (cellKey == "cell1" || cellKey == "cell2" || cellKey == "cell3" || cellKey == "cell4" || cellKey == "cell5" || cellKey == "cell6"
    || cellKey == "cell7" || cellKey == "cell8" || cellKey == "cell9") && deadlineKey == "deadline" && dataSize == 2 && cell == 0

    #Only Alice can place cross, and only Bob zero
    let inputSigned = ( (cellValue == 1 && aliceSigned && crossNum == zeroNum) || (cellValue == 10 && bobSigned && crossNum > zeroNum))

    #If any player will leave the game, he will lose on timeout
    let deadline= extract(getInteger(tx.data, "deadline"))
    
    #Deadline term is short for debug purposes.
    let deadlineCorrect= deadline >= height + 4 && deadline <= height + 6

    #Win, draw and timeout conditions
    let gameFinished= crossWin || zeroWin || draw

    #Contract will allow DATA transaction, only in case of this condition is true; Reset is temporally enabled for debug purposes.
    (inputCorrect && inputSigned && deadlineCorrect  && !gameFinished ) || (dataSize == 9 )


 case tx:TransferTransaction =>
    #Getting reward in case of win
    let win = ((tx.recipient == aliceAddr && crossWin)
    || (tx.recipient == bobAddr && zeroWin))

    #Getting reward in case of timeout
    let deadline= extract(getInteger(contract,"deadline"))
    let timeout = (crossNum > zeroNum && height > deadline && tx.recipient == aliceAddr)
    || (crossNum == zeroNum && height > deadline && tx.recipient == bobAddr)
    
    #Contract will allow TRANSFER transaction, only in case of this condition is true
    win || timeout && tx.amount >= 10000000 && tx.fee <= 1000000

    #Both players can take half of reward in case of draw
 case tx:MassTransferTransaction =>
    let aliceTx= tx.transfers[0]
    let bobTx= tx.transfers[1]

    #Minimal reward is 0.1 waves, maximum fee is 0.01 waves
    draw && aliceTx.recipient == aliceAddr && bobTx.recipient == bobAddr &&
    aliceTx.amount == bobTx.amount && aliceTx.amount >= 10000000 && tx.fee <= 1000000
                                                
    #All another transactions types, including SCRIPT transactions need to be forbidden.
    #Now it temporally enabled for debug purposes.
 case _ => true
}
